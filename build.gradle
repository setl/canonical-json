buildscript {
  dependencies {
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
  }
}

plugins {
  id 'java'
  id 'java-library'
  id 'maven-publish'
  id 'checkstyle'
  id "com.github.spotbugs"
  id 'com.palantir.git-version'
  id 'signing'
  id 'org.owasp.dependencycheck'
}


group 'io.setl'
if ((versionDetails().branchName ==~ /^(master)|(release.*)|(patch.*)$/) && versionDetails().isCleanTag) {
  project.version = gitVersion()
} else {
  project.version = '100-SNAPSHOT'
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

checkstyle {
  toolVersion = "10.13.0"
  configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

checkstyleTest {
  enabled = false
}

// Guava conflict with checkstyle plugin.
configurations.checkstyle {
  resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
    select("com.google.guava:guava:0")
  }
}

spotbugs {
  excludeFilter = rootProject.file('config/spotbugs/spotbugs-exclude.xml')
}

spotbugsMain {
  reports {
    html {
      required = true
    }
    xml {
      required = false
    }
  }
}

// Do not perform spotbugs analysis on test code
spotbugsTest {
  enabled = false
}


repositories {
  mavenCentral()
}

dependencies {
  api group: 'javax.json', name: 'javax.json-api', version: '1.1.4'

  // We need this library for the Longest Common Subsequence solver which is needed for creating patches
  implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

  compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
  compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.9'
  compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'
  compileOnly group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '2.2.4.RELEASE'
  compileOnly group: 'org.springframework', name: 'spring-webmvc', version: '5.2.3.RELEASE'
  compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.2.0'

  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
  testImplementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-smile', version: '2.10.2'
  testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.9'
  testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'

  spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.0'
}

java {
  withSourcesJar()
  withJavadocJar()
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

javadoc {
  options.addStringOption('Xmaxwarns', '65536')
}

test {
  useJUnitPlatform()
}


artifacts {
  archives javadocJar, sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      pom {
        name = 'Canonical JSON'
        packaging = 'jar'
        // optionally artifactId can be defined here
        description = 'An implementation of the Canonical JSON format with support for javax.json and Jackson'
        url = 'https://github.com/setl/canonical-json'

        scm {
          connection = 'scm:git:https://github.com/setl/canonical-json.git'
          developerConnection = 'scm:git:https://github.com/setl/canonical-json.git'
          url = 'https://github.com/setl/canonical-json'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'simon-greatrix'
            name = 'Simon Greatrix'
            email = 'simon.greatrix@setl.io'
            organization = 'SETL'
            organizationUrl = 'https://setl.io'
          }
        }
      }
    }
  }

  repositories {
    maven {
      name = 'central'
      credentials {
        username = "$ossrhUsername"
        password = "$ossrhPassword"
      }

      if (version.endsWith("SNAPSHOT")) {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
      } else {
        url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }
  }
}

signing {
  useGpgCmd()
  sign publishing.publications.mavenJava
}


